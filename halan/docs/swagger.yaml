basePath: /halan/test/
definitions:
  exchange.IndexWithTimeAndSpaceComplexity:
    properties:
      index:
        type: integer
      space_complexity:
        type: string
      time_complexity:
        type: string
    type: object
  exchange.Node:
    properties:
      children:
        items:
          $ref: '#/definitions/exchange.Node'
        type: array
      value:
        type: integer
    type: object
  exchange.Number:
    properties:
      number:
        type: integer
    type: object
  exchange.Number2DArray:
    properties:
      numbers_2d:
        items:
          items:
            type: integer
          type: array
        type: array
    type: object
  exchange.NumberArray:
    properties:
      numbers:
        items:
          type: integer
        type: array
    type: object
  exchange.Value:
    properties:
      value:
        type: integer
    type: object
  exchange.Word:
    properties:
      word:
        type: string
    type: object
  exchange.WordArray:
    properties:
      words:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
  description: The APIs of Halan problem-solving challenge
  termsOfService: http://swagger.io/terms/
  title: Halan problem-solving challenge
  version: "1.0"
paths:
  /challenge/problem-1:
    post:
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.Word'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: ""
      summary: Get String Palindrome
  /challenge/problem-2:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Write the Linux command needed to change a file name from original.txt
        to changed.txt
  /challenge/problem-3/rld:
    post:
      description: provide a function runLengthDecode to reverse the compression.
        The output can be anything, as long as you can recreate the input with it
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.Word'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exchange.Word'
      summary: provide a function runLengthDecode
  /challenge/problem-3/rle:
    post:
      description: Given a string containing characters (a-z), implement a function
        runLengthEncode that compresses repeated ‘runs’ of the same character by storing
        the length of that run
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.Word'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.Word'
        "400":
          description: ""
      summary: implement a function runLengthEncode
  /challenge/problem-4:
    post:
      description: Let f and g be two one-argument functions. The composition f after
        g is defined to be the function . Define a function compose that implements
        composition. For example, if inc is a function that adds 1 to its argument,
        and square is a function that squares its argument
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.Number'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.Value'
      summary: Define a function compose that implements composition.
  /challenge/problem-5:
    post:
      description: Write a function unique that takes an array of strings as input
        and returns an array of the unique entries in the input
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.WordArray'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.WordArray'
      summary: function unique
  /challenge/problem-6:
    post:
      description: In linear algebra, the transpose of a matrix is another matrix
        created by writing the rows of as the columns of a t,
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.Number2DArray'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.Number2DArray'
      summary: the transpose of a matrix
  /challenge/problem-7:
    post:
      description: 'You are given 2 containers: A and B. Container A can hold 5 litres
        of water, while container B can hold 3 litres. You are also given a source
        of water that you can use as you wish. Show how you can use the containers
        and the water source to put exactly 4 litres of water in container'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.Word'
      summary: Containers A, B
  /challenge/problem-8:
    post:
      description: Given an integer array of length n, find the index of the first
        duplicate element in the array and state the runtime and space complexity
        of your implementation
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.NumberArray'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.IndexWithTimeAndSpaceComplexity'
        "400":
          description: ""
      summary: Find the index of the first duplicate element in the array
  /challenge/problem-9:
    post:
      description: Given the below tree structure, write a function sum that accepts
        a node and returns the sum of integers for the whole tree represented by the
        given node argument
      parameters:
      - description: required request filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/exchange.Node'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exchange.Value'
      summary: sum of integers for the whole tree represented
swagger: "2.0"
