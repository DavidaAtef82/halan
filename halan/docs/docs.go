// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/challenge/problem-1": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get String Palindrome",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.Word"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/challenge/problem-2": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "summary": "Write the Linux command needed to change a file name from original.txt to changed.txt",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/challenge/problem-3/rld": {
            "post": {
                "description": "provide a function runLengthDecode to reverse the compression. The output can be anything, as long as you can recreate the input with it",
                "produces": [
                    "application/json"
                ],
                "summary": "provide a function runLengthDecode",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.Word"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/exchange.Word"
                        }
                    }
                }
            }
        },
        "/challenge/problem-3/rle": {
            "post": {
                "description": "Given a string containing characters (a-z), implement a function runLengthEncode that compresses repeated ‘runs’ of the same character by storing the length of that run",
                "produces": [
                    "application/json"
                ],
                "summary": "implement a function runLengthEncode",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.Word"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.Word"
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/challenge/problem-4": {
            "post": {
                "description": "Let f and g be two one-argument functions. The composition f after g is defined to be the function . Define a function compose that implements composition. For example, if inc is a function that adds 1 to its argument, and square is a function that squares its argument",
                "produces": [
                    "application/json"
                ],
                "summary": "Define a function compose that implements composition.",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.Number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.Value"
                        }
                    }
                }
            }
        },
        "/challenge/problem-5": {
            "post": {
                "description": "Write a function unique that takes an array of strings as input and returns an array of the unique entries in the input",
                "produces": [
                    "application/json"
                ],
                "summary": "function unique",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.WordArray"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.WordArray"
                        }
                    }
                }
            }
        },
        "/challenge/problem-6": {
            "post": {
                "description": "In linear algebra, the transpose of a matrix is another matrix created by writing the rows of as the columns of a t,",
                "produces": [
                    "application/json"
                ],
                "summary": "the transpose of a matrix",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.Number2DArray"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.Number2DArray"
                        }
                    }
                }
            }
        },
        "/challenge/problem-7": {
            "post": {
                "description": "You are given 2 containers: A and B. Container A can hold 5 litres of water, while container B can hold 3 litres. You are also given a source of water that you can use as you wish. Show how you can use the containers and the water source to put exactly 4 litres of water in container",
                "produces": [
                    "application/json"
                ],
                "summary": "Containers A, B",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.Word"
                        }
                    }
                }
            }
        },
        "/challenge/problem-8": {
            "post": {
                "description": "Given an integer array of length n, find the index of the first duplicate element in the array and state the runtime and space complexity of your implementation",
                "produces": [
                    "application/json"
                ],
                "summary": "Find the index of the first duplicate element in the array",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.NumberArray"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.IndexWithTimeAndSpaceComplexity"
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        },
        "/challenge/problem-9": {
            "post": {
                "description": "Given the below tree structure, write a function sum that accepts a node and returns the sum of integers for the whole tree represented by the given node argument",
                "produces": [
                    "application/json"
                ],
                "summary": "sum of integers for the whole tree represented",
                "parameters": [
                    {
                        "description": "required request filters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/exchange.Node"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/exchange.Value"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "exchange.IndexWithTimeAndSpaceComplexity": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "space_complexity": {
                    "type": "string"
                },
                "time_complexity": {
                    "type": "string"
                }
            }
        },
        "exchange.Node": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/exchange.Node"
                    }
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "exchange.Number": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "integer"
                }
            }
        },
        "exchange.Number2DArray": {
            "type": "object",
            "properties": {
                "numbers_2d": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "exchange.NumberArray": {
            "type": "object",
            "properties": {
                "numbers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "exchange.Value": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "integer"
                }
            }
        },
        "exchange.Word": {
            "type": "object",
            "properties": {
                "word": {
                    "type": "string"
                }
            }
        },
        "exchange.WordArray": {
            "type": "object",
            "properties": {
                "words": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/halan/test/",
	Schemes:          []string{},
	Title:            "Halan problem-solving challenge",
	Description:      "The APIs of Halan problem-solving challenge",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
